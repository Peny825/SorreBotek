[null,{"name":"giveawayStart","temp":"","event-type":"1","_id":"jEKcf","actions":[{"behavior":"0","interpretation":"1","code":"if (globalVars(\"giveawayStartAlreadyRan\") == null) {\n\n    Actions.storeValue(true, 3, \"giveawayStartAlreadyRan\", cache);\n\n    const fs = require('fs');\n    const request = require('request');\n    const Files = Actions.getDBM().Files;\n    var checkUpdates = true;\n\n    if (checkUpdates) {\n        request('https://raw.githubusercontent.com/ItzPike/DBM-Rawdata-Releases/master/Giveaway%20Rewritten/versionCheck.json', function(error, response, body) {\n            if (response.statusCode == 200) {\n                var allVersions = JSON.parse(body);\n\n                var commandVersions = {};\n                var eventVersions = {};\n                var commandKeys = [];\n                var eventKeys = [];\n\n                allVersions[\"commands\"].forEach(commandVer => {\n                    commandVersions[commandVer[0]] = commandVer[1];\n                    commandKeys.push(commandVer[0]);\n                });\n\n                allVersions[\"events\"].forEach(eventVer => {\n                    eventVersions[eventVer[0]] = eventVer[1];\n                    eventKeys.push(eventVer[0])\n                })\n\n                fs.readFile(\"./data/commands.json\", async function(err, data) {\n                    var data = JSON.parse(data);\n\n                    var systemCommands = await data.filter(command => command != null && commandKeys.includes(command[\"_id\"]));\n\n                    for (i = 0; i < systemCommands.length; i++) {\n                        var systemActionFind = await systemCommands[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                        if (systemActionFind.length != 0) {\n                            var versionCheckSplit = systemActionFind[0].code.split(\"VersionCheck:\");\n                            if (versionCheckSplit[1] != null && versionCheckSplit[1] != commandVersions[systemCommands[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                console.log(`[Giveaway Rewritten] The command ${systemCommands[i][\"name\"]} needs an update!`)\n                            }\n                        }\n                    }\n                })\n\n                fs.readFile(\"./data/events.json\", async function(err, data) {\n                    var data = JSON.parse(data);\n\n                    var systemEvent = await data.filter(event => event != null && eventKeys.includes(event[\"_id\"]));\n\n                    for (i = 0; i < systemEvent.length; i++) {\n                        var systemEventFind = await systemEvent[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                        if (systemEventFind.length != 0) {\n                            var versionCheckSplit = systemEventFind[0].code.split(\"VersionCheck:\");\n                            if (versionCheckSplit != null && versionCheckSplit[versionCheckSplit.length - 1] != eventVersions[systemEvent[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                console.log(`[Giveaway Rewritten] The event ${systemEvent[i][\"name\"]} needs an update!`)\n                            }\n                        }\n                    }\n                })\n            }\n        });\n    }\n\n    if (globalVars(\"giveawaySystemMoved\") == null) {\n        Files.saveGlobalVariable(\"giveawaySystemMoved\", true);\n\n        if (!fs.existsSync(`./data/giveawaySystem`)) {\n            fs.mkdirSync(`./data/giveawaySystem`);\n        }\n\n        [\"giveawayData\"].forEach(fileName => {\n            if (fs.existsSync(`./data/${fileName}.json`)) {\n                fs.renameSync( `./data/${fileName}.json`, `./data/giveawaySystem/${fileName}.json`);\n            }\n        });\n    }\n\n    if (!fs.existsSync('./data/giveawaySystem/giveawayData.json')) {\n        fs.writeFile(\"./data/giveawaySystem/giveawayData.json\", \"{}\", function(err) {\n            if (err) {\n                return console.log(err);\n            }\n            \n            Actions.giveawaySystem = {};\n        });\n    } else {\n        fs.readFile('./data/giveawaySystem/giveawayData.json', async function read(err, data) {\n            if (err) {\n                throw err;\n            }\n\n            Actions.giveawaySystem = JSON.parse(data);\n        })\n    }\n}\n\n// VersionCheck:2","storage":"0","varName":"","name":"Run Script"}]},{"name":"giveawayCheck","temp":"10","event-type":"3","_id":"eavvT","actions":[{"behavior":"0","interpretation":"1","code":"const fs = require('fs');\nlet giveawaysDue = [];\nvar timeNow = Math.floor(Date.now() / 1000);\nvar counter = 0;\nvar interval;\nif (globalVars(\"giveawayRan\") == null) {\n    Actions.storeValue(1, 3, \"giveawayRan\", cache);\n\n    var giveawaySysData = Actions.giveawaySystem;\n\n    for (var key in giveawaySysData) {\n        if (giveawaySysData.hasOwnProperty(key)) {\n            let giveaways = giveawaySysData[key];\n            let dueGive = giveaways.filter(({\n                finishUnix\n            }) => finishUnix <= timeNow);\n            if (dueGive.length > 0) {\n                dueGive.forEach(async f => {\n                    giveawaysDue.push(f);\n                    giveaways.splice(giveaways.findIndex(e => e.id === f.id), 1)\n                });\n\n                fs.writeFile(\"./data/giveawaySystem/giveawayData.json\", JSON.stringify(giveawaySysData), function(err) {\n                    if (err) {\n                        return console.log(err);\n                    }\n                });\n            }\n        }\n    }\n    if (giveawaysDue.length > 0) {\n        interval = setInterval(drawWinners, 2000);\n    }\n\n}\n\nasync function drawWinners() {\n    var preCount = counter;\n    var channelToFetch = client.channels.cache.get(giveawaysDue[preCount][\"channel\"]);\n    if (channelToFetch != null) {\n        channelToFetch.messages.fetch(giveawaysDue[preCount][\"giveawayMessageID\"]).then(giveawayMessage => {\n            var giveawayEmojiCache = giveawayMessage.reactions.cache.get('🎉');\n            giveawayEmojiCache.users.fetch().then(async function(giveawayUsers) {\n                if (giveawayEmojiCache.count > 100) {\n                    for (i = 0; i < giveawayEmojiCache.count; i++) {\n                        var fetchedEmojiUsers = await giveawayEmojiCache.users.fetch({\n                            after: giveawayUsers.last().id\n                        });\n                        await giveawayUsers.concat(fetchedEmojiUsers);\n                    }\n                }\n\n                giveawayUsers = giveawayUsers.array();\n                giveawayUsers = await giveawayUsers.filter(object => object.id != client.user.id);\n                var numberOfWinners = parseInt(giveawaysDue[preCount][\"winner\"]);\n                var gw = giveawayMessage.embeds[0];\n\n                gw.color = 0x000000;\n                if (gw.fields.length == 6) {\n                    gw.fields[5].value = \"Ended\"\n                }\n                gw.description = \"**Giveaway Ended**\\n\\n\" + gw.description\n\n                var winnerArray = [];\n                var winnerText = \"\";\n                if (giveawayUsers.length > 0) {\n                    if (giveawayUsers.length > numberOfWinners) {\n                        for (var i = 0; i < numberOfWinners; i++) {\n                            var randomNumber = Math.floor(Math.random() * giveawayUsers.length);\n                            winnerArray.push(`${giveawayUsers[randomNumber]}`);\n                            giveawayUsers.splice(giveawayUsers.indexOf(randomNumber), randomNumber);\n                        }\n                    } else if (giveawayUsers.length <= numberOfWinners) {\n                        for (i = 0; i < giveawayUsers.length; i++) {\n                            winnerArray.push(`${giveawayUsers[i]}`);\n                        }\n                    }\n\n                    for (i = 0; i < winnerArray.length; i++) {\n                        winnerText = winnerText + winnerArray[i] + '\\n';\n                    }\n\n                    gw.description += `\\n\\nThe winners are..\\n${winnerText}`;\n                    giveawayMessage.edit({\n                        embed: gw\n                    });\n                    channelToFetch.send(`🎉 Congratulations! 🎉 \\n ${winnerText} \\nThey have won **${giveawaysDue[preCount][\"itemGivingAway\"]}**`);\n\n                } else {\n                    gw.description += \"\\n\\nNo one entered the giveaway and thus no one won.\";\n                    giveawayMessage.edit({\n                        embed: gw\n                    });\n                    channelToFetch.send(`🎉 Giveaway Ended 🎉\\n\\nNo one entered the giveaway and thus no one won.`);\n                }\n            })\n        })\n    }\n    \n    counter += 1;\n    if (counter >= giveawaysDue.length) {\n        clearInterval(interval);\n    }\n}\n\n// VersionCheck:2","storage":"0","varName":"","name":"Run Script"},{"time":"7","measurement":"1","name":"Wait"},{"storage":"3","varName":"giveawayRan","changeType":"0","value":"null","name":"Control Variable"}],"temp2":"America/New_York"},{"name":"CaptchaStart","temp":"memberJoined","event-type":"1","_id":"tbmZg","actions":[{"behavior":"1","interpretation":"1","code":"if (globalVars(\"captchaStartAlreadyRan\") == null) {\n    const request = require(\"request\");\n    const Discord = require('discord.js');\n    const fs = require('fs');\n    var checkUpdates = true;\n\n    this.storeValue(true, 3, \"captchaStartAlreadyRan\", cache);\n\n    if (!fs.existsSync(\"./captchas\")) {\n        fs.mkdirSync(\"./captchas\");\n    }\n\n    fs.readdir(\"./captchas\", (err, files) => {\n        if (err) throw err;\n\n        for (const file of files) {\n            var fileExt = getExtension(file);\n            if (fileExt == \".png\") {\n                fs.unlink(`./captchas/${file}`, err => {\n                    if (err) throw err;\n                });\n            }\n        }\n    });\n\n    function getExtension(filename) {\n        var i = filename.lastIndexOf('.');\n        return (i < 0) ? '' : filename.substr(i);\n    }\n\n    var requiredIntents = [\"GUILD_MEMBERS\"];\n        var intentCheck = new Discord.Intents(DBM.Bot.intents()).toArray();\n        requiredIntents.forEach(intent => {\n            if (!intentCheck.includes(intent)) {\n                console.log(`[Captcha] You don't have the ${intent} intent enabled!`)\n            }\n        })\n\n\n\n    if (checkUpdates) {\n        request('https://raw.githubusercontent.com/ItzPike/DBM-Rawdata-Releases/master/Captcha/versionCheck.json', function(error, response, body) {\n            if (response.statusCode == 200) {\n                var allVersions = JSON.parse(body);\n\n                var commandVersions = {};\n                var eventVersions = {};\n                var commandKeys = [];\n                var eventKeys = []\n\n                allVersions[\"commands\"].forEach(commandVer => {\n                    commandVersions[commandVer[0]] = commandVer[1];\n                    commandKeys.push(commandVer[0]);\n                });\n\n                allVersions[\"events\"].forEach(eventVer => {\n                    eventVersions[eventVer[0]] = eventVer[1];\n                    eventKeys.push(eventVer[0])\n                })\n\n                fs.readFile(\"./data/commands.json\", async function(err, data) {\n                    var data = JSON.parse(data);\n\n                    var systemCommands = await data.filter(command => command != null && commandKeys.includes(command[\"_id\"]));\n\n                    for (i = 0; i < systemCommands.length; i++) {\n                        var systemActionFind = await systemCommands[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                        if (systemActionFind.length != 0) {\n                            var versionCheckSplit = systemActionFind[0].code.split(\"VersionCheck:\");\n                            if (versionCheckSplit[1] != null && versionCheckSplit[1] != commandVersions[systemCommands[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                console.log(`[Capcha] The command ${systemCommands[i][\"name\"]} needs an update!`)\n                            }\n                        }\n                    }\n                })\n\n                fs.readFile(\"./data/events.json\", async function(err, data) {\n                    var data = JSON.parse(data);\n\n                    var systemEvent = await data.filter(event => event != null && eventKeys.includes(event[\"_id\"]));\n\n                    for (i = 0; i < systemEvent.length; i++) {\n                        var systemEventFind = await systemEvent[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                        if (systemEventFind.length != 0) {\n                            var versionCheckSplit = systemEventFind[0].code.split(\"VersionCheck:\");\n                            if (versionCheckSplit != null && versionCheckSplit[versionCheckSplit.length - 1] != eventVersions[systemEvent[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                console.log(`[Capcha] The event ${systemEvent[i][\"name\"]} needs an update!`)\n                            }\n                        }\n                    }\n                })\n            }\n        });\n    }\n\n    client.on('guildMemberAdd', (member) => {\n        var memberJoined = member;\n        var serverRoleToGive = memberJoined.guild.data(\"serverCaptchaRole\");\n        var roleToGive = [];\n\n        if (serverRoleToGive != null && serverRoleToGive != 0) {\n            if (!Array.isArray(serverRoleToGive)) {\n                serverRoleToGive = [serverRoleToGive];\n            } else {\n                serverRoleToGive = serverRoleToGive;\n            }\n\n            var rolesInServer = memberJoined.guild.roles.cache.keyArray();\n\n            for (i=0; i<serverRoleToGive.length; i++) {\n                if (rolesInServer.includes(serverRoleToGive[i])) {\n                    roleToGive.push(serverRoleToGive[i]);\n                }\n            }\n\n            if (roleToGive.length > 0 || serverRoleToGive == 1) {\n                getCaptcha(3, \"\");\n            } else {\n                memberJoined.guild.setData(\"serverCaptchaRole\", 0);\n            }\n\n            if (serverRoleToGive != roleToGive) {\n                memberJoined.guild.setData(\"serverCaptchaRole\", roleToGive)\n            }\n        }\n\n        function getCaptcha(attempts, reason) {\n            var embed = {\n                \"title\": \"Automated Captcha System\",\n                \"description\": `Welcome to ${memberJoined.guild.name}!\\n\\nThis server is protected by a captcha system and you are required to solve the below captcha.\\n\\n**Captchas are case sesitive.**\\n\\nIf you answer wrong, you have three attempts in total to try to get it right.\\nThe captcha will refresh after every failed attempt.\\n\\nYou have 120 seconds for each captcha\\n\\n${attempts} Attempts Left\\n\\n${reason}`,\n                \"color\": 0x00ff00\n            }\n\n            if (attempts != 0) {\n                request('https://captchaGenerate.itzpike.repl.co', function(error, response, body) {\n                    if (response.statusCode == 200) {\n                        body = JSON.parse(body);\n\n                        var data = body.image.replace(/^data:image\\/\\w+;base64,/, '');\n                        var fileTitle = Math.random().toString(36).substring(6);\n                        fs.writeFile(`./captchas/${fileTitle}.png`, data, {\n                            encoding: 'base64'\n                        }, function(err) {\n                            if (err) {\n                                console.log(err);\n                            }\n\n                            const file = new Discord.MessageAttachment(`./captchas/${fileTitle}.png`);\n                            embed[\"image\"] = {\n                                \"url\": `attachment://${fileTitle}.png`\n                            }\n\n                            memberJoined.send({\n                                files: [file],\n                                embed: embed\n                            }).then(msgSent => {\n                                msgSent.channel.awaitMessages(m => m.author.id == memberJoined.id, {\n                                        max: 1,\n                                        time: 120000,\n                                        errors: ['time']\n                                    })\n                                    .then(collected => {\n                                        fs.unlinkSync(`./captchas/${fileTitle}.png`);\n                                        msgSent.delete();\n                                        if (collected.first().content.replace(/\\s/g, '') == body.key) {\n                                            if (serverRoleToGive != 1) {\n                                                memberJoined.roles.add(roleToGive);\n                                            }\n                                            embed.description = \"Captcha success!\\n\\nWelcome to the server..\";\n                                            delete embed[\"image\"];\n                                            memberJoined.send({\n                                                embed: embed\n                                            });\n                                        } else {\n                                            getCaptcha(attempts - 1, \"You did not enter the valid captcha!\");\n                                        }\n                                    })\n                                    .catch(err => {\n                                        fs.unlinkSync(`./captchas/${fileTitle}.png`);\n                                        getCaptcha(attempts - 1, \"You had ran out of time!\");\n                                    });\n                            })\n                        });\n                    }\n                })\n            } else {\n                embed.color = 0xff0000;\n                embed.description = \"Captcha verfication failed!\\n\\nYou have ran out of attempts!\\nPlease rejoin the server to get the captcha again.\";\n                memberJoined.send({\n                    embed: embed\n                }).then(serverMess => {\n                    memberJoined.kick();\n                })\n            }\n        }\n\n\n    })\n}\n\n// VersionCheck:7","storage":"0","varName":"","name":"Run Script"}]},{"name":"reactionStart","temp":"","event-type":"0","_id":"Lwriz","actions":[{"behavior":"3","name":"Run Action Sequence Once"},{"code":"const _this = this;\nconst fs = require('fs');\n\n//Settings\nconst dmUserAfter = true; // Default, can be changed to false\nvar messageSentAdd = 'Pomyślnie nadano range {rolename} in {server}';\nvar messageSentRemove = 'Pomyślnie usunięto range {rolename} in {server}';\n// The only variables that work rn, {rolename} and {server}\n\n\nif(fs.existsSync('./data/reactionRoleData.json')) {\n    fs.readFile('./data/reactionRoleData.json', function read(err, data) {\n        if (err) {\n            throw err;\n        }\n        data = JSON.parse(data)\n    \n        _this.storeValue(data, 3, 'reactionRoleInf', cache);\n    });\n} else {\n    fs.writeFile(\"./data/reactionRoleData.json\", \"{}\", function(err) {\n        if(err) {\n            return console.log(err);\n        }\n    });\n    _this.storeValue({}, 3, 'reactionRoleInf', cache);\n}\n\nclient.on('raw', packet => {\n    if (!['MESSAGE_REACTION_ADD', 'MESSAGE_REACTION_REMOVE'].includes(packet.t)) return;\n    const channel = client.channels.get(packet.d.channel_id);\n    if (channel.messages.has(packet.d.message_id)) return;\n    channel.fetchMessage(packet.d.message_id).then(message => {\n        const emoji = packet.d.emoji.id ? `${packet.d.emoji.name}:${packet.d.emoji.id}` : packet.d.emoji.name;\n        const reaction = message.reactions.get(emoji);\n        const reactionUser = client.users.get(packet.d.user_id);\n        if (reaction) reaction.users.set(packet.d.user_id, reactionUser);\n        if (!reactionUser.bot) {\n            if (packet.t === 'MESSAGE_REACTION_ADD') {\n                client.emit('messageReactionAdd', reaction, reactionUser);\n            }\n            if (packet.t === 'MESSAGE_REACTION_REMOVE') {\n                client.emit('messageReactionRemove', reaction, reactionUser);\n            }\n        }\n    });\n});\n\nclient.on('messageReactionAdd', async function(reaction, user) {\n    if (!user.bot) {\n        const reactionData = globalVars(\"reactionRoleInf\");\n        const reactionGuild = reaction.message.guild;\n        const reactionMessage = reaction.message;\n        if (reactionData.hasOwnProperty(reactionMessage.id)) {\n            var emojiName = reaction.emoji.name;\n            var roleInData = reactionData[reactionMessage.id].filter(re => re[0] == emojiName || re[0].name == emojiName)\n            if (roleInData.length != 0) {\n                var guilduser = await reactionGuild.fetchMember(user);\n                var roleData = roleInData[0][1];\n                var reactionRole = await reactionGuild.roles.get(roleData);\n                if (!guilduser.roles.has(roleData)) {\n                    guilduser.addRole(reactionRole);\n\n                    if (dmUserAfter){guilduser.send(messageSentAdd.replace(\"{rolename}\",`**${reactionRole.name}**`).replace(\"{server}\",`**${reactionGuild.name}**`));}\n                }\n            }\n        }\n    }\n\n});\n\nclient.on('messageReactionRemove', async function(reaction, user) {\n    const reactionData = globalVars(\"reactionRoleInf\");\n    const reactionGuild = reaction.message.guild;\n    const reactionMessage = reaction.message;\n    if (reactionData.hasOwnProperty(reactionMessage.id)) {\n        var emojiName = reaction.emoji.name;\n        var roleInData = reactionData[reactionMessage.id].filter(re => re[0] == emojiName || re[0].name == emojiName)\n        if (roleInData.length != 0) {\n            var guilduser = await reactionGuild.fetchMember(user);\n            var roleData = roleInData[0][1];\n            var reactionRole = await reactionGuild.roles.get(roleData);\n\n            if (guilduser.roles.has(roleData)) {\n                guilduser.removeRole(reactionRole);\n                if (dmUserAfter){guilduser.send(messageSentRemove.replace(\"{rolename}\",`**${reactionRole.name}**`).replace(\"{server}\",`**${reactionGuild.name}**`));}\n            }\n        }\n    }\n});","behavior":"0","interpretation":"1","storage":"0","varName":"","VTypeSelect":"0","CVTypeValue":"","name":"Run Script"}]},{"name":"Wiadomość Powitalna","temp":"","event-type":"4","_id":"aDlfk","actions":[]},{"name":"inviteStart","temp":"","event-type":"1","_id":"EqQxg","actions":[{"behavior":"1","interpretation":"1","code":"    // event\n    if (globalVars(\"inviteManagerRanAlready\") == null) {\n        const Discord = require(\"discord.js\");\n        var delay = 1000;\n        var inviteDatabase = {};\n        var checkUpdates = true;\n        var dmOwnerOnMissingPermission = false;\n\n        Actions.storeValue(true, 3, \"inviteManagerRanAlready\", cache);\n\n        const fs = require('fs');\n        const request = require('request');\n\n        var requiredIntents = [\"GUILD_MEMBERS\", \"GUILD_INVITES\"];\n        var intentCheck = new Discord.Intents(DBM.Bot.intents()).toArray();\n        requiredIntents.forEach(intent => {\n            if (!intentCheck.includes(intent)) {\n                console.log(`[Invite Manager] You don't have the ${intent} intent enabled!`)\n            }\n        })\n\n        if (checkUpdates) {\n            request('https://raw.githubusercontent.com/ItzPike/DBM-Rawdata-Releases/master/Invite%20Manager/versionCheck.json', function(error, response, body) {\n                if (response.statusCode == 200) {\n                    var allVersions = JSON.parse(body);\n\n                    var commandVersions = {};\n                    var eventVersions = {};\n                    var commandKeys = [];\n                    var eventKeys = [];\n\n                    allVersions[\"commands\"].forEach(commandVer => {\n                        commandVersions[commandVer[0]] = commandVer[1];\n                        commandKeys.push(commandVer[0]);\n                    });\n\n                    allVersions[\"events\"].forEach(eventVer => {\n                        eventVersions[eventVer[0]] = eventVer[1];\n                        eventKeys.push(eventVer[0])\n                    })\n\n                    fs.readFile(\"./data/commands.json\", async function(err, data) {\n                        var data = JSON.parse(data);\n\n                        var systemCommands = await data.filter(command => command != null && commandKeys.includes(command[\"_id\"]));\n\n                        for (i = 0; i < systemCommands.length; i++) {\n                            var systemActionFind = await systemCommands[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                            if (systemActionFind.length != 0) {\n                                var versionCheckSplit = systemActionFind[0].code.split(\"VersionCheck:\");\n                                if (versionCheckSplit[1] != null && versionCheckSplit[1] != commandVersions[systemCommands[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                    console.log(`[Invite Manager] The command ${systemCommands[i][\"name\"]} needs an update!`)\n                                }\n                            }\n                        }\n                    })\n\n                    fs.readFile(\"./data/events.json\", async function(err, data) {\n                        var data = JSON.parse(data);\n\n                        var systemEvent = await data.filter(event => event != null && eventKeys.includes(event[\"_id\"]));\n                        for (i = 0; i < systemEvent.length; i++) {\n                            var systemEventFind = await systemEvent[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                            if (systemEventFind.length != 0) {\n                                var versionCheckSplit = systemEventFind[0].code.split(\"VersionCheck:\");\n                                if (versionCheckSplit != null && versionCheckSplit[versionCheckSplit.length - 1] != eventVersions[systemEvent[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                    console.log(`[Invite Manager] The event ${systemEvent[i][\"name\"]} needs an update!`)\n                                }\n                            }\n                        }\n                    })\n                }\n            });\n        }\n\n        Actions.inviteModifyData = function(userID, guildID, valueChange, invalidReal) {\n            invalidReal = invalidReal;\n            if (invalidReal == 1 || invalidReal == 0) {\n                if (invalidReal == 1) {\n                    invalidReal = \"real\";\n                } else {\n                    invalidReal = \"invalid\";\n                }\n\n                if (!isNaN(valueChange)) {\n\n                    if (!checkProperty(inviterData, guildID)) {\n                        inviterData[guildID] = {};\n                    }\n\n                    if (!checkProperty(inviterData[guildID], userID)) {\n                        inviterData[guildID][userID] = {\n                            \"invites\": [],\n                            \"data\": {\n                                \"real\": 0,\n                                \"invalid\": 0\n                            }\n                        };\n                    }\n\n                    inviterData[guildID][userID][\"data\"][invalidReal] += parseInt(valueChange);\n                    if (inviterData[guildID][userID][\"data\"][invalidReal] < 0) {\n                        inviterData[guildID][userID][\"data\"][invalidReal] = 0;\n                    }\n\n                    writeToData(\"inviteManagerData\", invitePData, \"invitePData\");\n\n                    return \"success\";\n\n                } else {\n                    return \"failed - Invalid value\";\n                }\n            } else {\n                return \"failed - Invalid value change selection\";\n            }\n        }\n\n        Actions.inviteGet = function(userID, guildID, invalidReal) {\n            invalidReal = invalidReal;\n            if (invalidReal == 1 || invalidReal == 0) {\n                if (invalidReal == 1) {\n                    invalidReal = \"real\";\n                } else {\n                    invalidReal = \"invalid\";\n                }\n\n                if (checkProperty(inviterData, guildID) && checkProperty(inviterData[guildID], userID)) {\n                    return inviterData[guildID][userID][\"data\"][invalidReal];\n                } else {\n                    return \"failed - No data found\";\n                }\n            } else {\n                return \"failed - Invalid value change selection\";\n            }\n        }\n\n        Actions.fetchDatabase = function() {\n            return inviteDatabase;\n        }\n\n        client.guilds.cache.forEach(g => {\n            g.fetchInvites().then(guildInvites => {\n                try {\n                    inviteDatabase[g.id] = guildInvites;\n                } catch (error) {\n                    console.log(error);\n                }\n            }).catch(error => {\n                if (dmOwnerOnMissingPermission) {\n                    setTimeout(function() {\n                        g.owner.send(\"Hello!\\n\\nThis bot requires the `MANAGE_GUILD` permission to allow for the invite manager section of the bot to work.\\n\\nIf you do not turn on the permission, the bot cannot track incoming invites!\");\n                    }, delay);\n                    delay += 1000;\n                }\n            })\n        });\n\n        var inviteSettings;\n        var inviteData;\n        var invitePData;\n        var inviterData;\n        var invitedData;\n\n        if (globalVars(\"inviteManagerDataMoved\") == null) {\n            Files.saveGlobalVariable(\"inviteManagerDataMoved\", true);\n\n            if (!fs.existsSync(`./data/inviteManager`)) {\n                fs.mkdirSync(`./data/inviteManager`);\n            }\n\n            [\"inviteManagerSettings\", \"inviteManagerInviteData\", \"inviteManagerData\"].forEach(fileName => {\n                if (fs.existsSync(`./data/${fileName}.json`)) {\n                    fs.renameSync(`./data/${fileName}.json`, `./data/inviteManager/${fileName}.json`);\n                }\n            });\n\n\n        }\n\n        checkReadFile(\"inviteManagerData\", {\n            \"inviterData\": {},\n            \"invitedData\": {}\n        }, \"invitePData\").then(() => {\n            invitePData = Actions.invitePData;\n            inviterData = Actions.invitePData[\"inviterData\"];\n            invitedData = Actions.invitePData[\"invitedData\"];\n        }).catch();\n\n        checkReadFile(\"inviteManagerSettings\", {}, \"inviteSettings\").then(() => {\n            inviteSettings = Actions.inviteSettings;\n        }).catch();\n\n        checkReadFile(\"inviteManagerInviteData\", {}, \"inviteData\").then(async () => {\n            if (globalVars(\"inviteManagerDataConvertedOnce\") == null) {\n                Files.saveGlobalVariable(\"inviteManagerDataConvertedOnce\", true);\n                inviteData = Actions.inviteData;\n\n                var inviteDataKeys = Object.keys(inviteData);\n\n                var lastInviteKey = inviteDataKeys[inviteDataKeys.length - 1];\n\n                for (var key in inviteData) {\n                    if (Array.isArray(inviteData[key])) {\n                        var base = {\n                            \"inviter\": \"0\",\n                            \"codeCreated\": \"0\",\n                            \"uses\": 0,\n                            \"playersTracked\": inviteData[key]\n                        };\n\n                        await client.fetchInvite(key).then(inviteObj => {\n                            base[\"inviter\"] = inviteObj.inviter.id;\n                            base[\"codeCreated\"] = inviteObj.createdAt;\n                            base[\"uses\"] = inviteObj.uses;\n\n                            inviteData[key] = base;\n                        }).catch(error => {\n                            inviteData[key] = base;\n                        })\n                    }\n\n                    if (lastInviteKey == key) {\n                        writeToData(\"inviteManagerInviteData\", inviteData, \"inviteData\");\n                    }\n                }\n\n            } else {\n                inviteData = Actions.inviteData;\n            }\n        }).catch();\n\n        client.on('guildMemberAdd', (member) => {\n            var memberGuild = member.guild;\n            var memberGuildID = memberGuild.id;\n\n            var guildInv = inviteDatabase[memberGuildID];\n            memberGuild.fetchInvites().then(guildInvites => {\n                inviteDatabase[memberGuildID] = guildInvites;\n                const invited = guildInvites.find(i => guildInv.get(i.code).uses < i.uses);\n\n                if (invited != null) {\n                    client.users.fetch(invited.inviter.id).then(inviter => {\n                        var inviterID = inviter.id.toString();\n                        var invitedID = member.id.toString();\n\n                        if (!checkProperty(inviteData, invited.code)) {\n                            inviteData[invited.code] = {\n                                \"inviter\": inviterID,\n                                \"codeCreated\": invited[\"createdAt\"],\n                                \"uses\": invited[\"uses\"],\n                                \"playersTracked\": []\n                            };\n                        }\n\n                        var memInviteDataIndex = inviteData[invited.code][\"playersTracked\"].findIndex(memberN => memberN == member.id);\n                        inviteData[invited.code][\"playersTracked\"][\"uses\"] = invited[\"uses\"];\n                        if (memInviteDataIndex == -1) {\n                            inviteData[invited.code][\"playersTracked\"].push(member.id);\n                        } else {\n                            inviteData[invited.code][\"playersTracked\"].splice(memInviteDataIndex, 1);\n                            inviteData[invited.code][\"playersTracked\"].push(member.id);\n                        }\n\n                        writeToData(\"inviteManagerInviteData\", inviteData, \"inviteData\");\n\n\n                        var memberTime = member.user.createdTimestamp / 1000;\n                        var currentTime = Math.floor(Date.now() / 1000);\n\n                        var memberAge = Math.floor((currentTime - memberTime) / 86400);\n\n\n                        if (!checkProperty(inviterData, memberGuildID)) {\n                            inviterData[memberGuildID] = {};\n                        }\n                        if (!checkProperty(inviterData[memberGuildID], inviterID)) {\n                            inviterData[memberGuildID][inviterID] = {\n                                \"invites\": [],\n                                \"data\": {\n                                    \"real\": 0,\n                                    \"invalid\": 0\n                                }\n                            };\n                        }\n\n\n\n                        if (!checkProperty(invitedData, memberGuildID)) {\n                            invitedData[memberGuildID] = {};\n                        }\n                        if (!checkProperty(invitedData[memberGuildID], invitedID)) {\n                            invitedData[memberGuildID][invitedID] = []\n                        }\n\n\n                        var inviterDataFile = inviterData[memberGuildID][inviterID];\n                        var invitedDataFile = invitedData[memberGuildID][invitedID];\n\n                        for (i = 0; i < inviterDataFile[\"invites\"].length; i++) {\n                            if (inviterDataFile[\"invites\"][i][\"id\"] == invitedID) {\n                                if (inviterDataFile[\"invites\"][i][\"valid\"]) {\n                                    inviterDataFile[\"data\"][\"real\"] -= 1;\n                                } else {\n                                    inviterDataFile[\"data\"][\"invalid\"] -= 1;\n                                }\n                                inviterDataFile[\"invites\"].splice(i, 1);\n                            }\n                        }\n\n                        inviterDataFile[\"invites\"].push({\n                            \"id\": member.id,\n                            \"time\": currentTime,\n                            \"codeUsed\": invited.code,\n                            \"valid\": true,\n                            \"invalidCause\": \"\"\n                        });\n\n                        if (checkProperty(inviteSettings, memberGuildID) && inviteSettings[memberGuildID][\"invalidize\"][\"age_check\"][\"enabled\"]) {\n                            if (memberAge >= inviteSettings[memberGuildID][\"invalidize\"][\"age_check\"][\"minimum\"]) {\n                                inviterDataFile[\"data\"][\"real\"] += 1;\n                            } else {\n                                var latestIndex = inviterDataFile[\"invites\"].length - 1;\n                                inviterDataFile[\"invites\"][latestIndex].valid = false;\n                                inviterDataFile[\"invites\"][latestIndex].invalidCause = \"Player did not meet the minimum account age on join.\";\n                                inviterDataFile[\"data\"][\"invalid\"] += 1;\n                            }\n                        } else {\n                            inviterDataFile[\"data\"][\"real\"] += 1;\n                        }\n\n                        for (i = 0; i < invitedDataFile.length; i++) {\n                            if (invitedDataFile[i] == inviterID) {\n                                invitedDataFile.splice(i, 1);\n                            }\n                        }\n\n                        invitedDataFile.push(inviterID);\n\n                        writeToData(\"inviteManagerData\", invitePData, \"invitePData\");\n\n                        if (checkProperty(inviteSettings, memberGuildID) && inviteSettings[memberGuildID][\"logging\"][\"enabled\"]) {\n\n                            var fetchedChannel = memberGuild.channels.cache.get(inviteSettings[memberGuildID][\"logging\"][\"channel\"]);\n\n                            if (fetchedChannel != null) {\n\n\n                                var guildData = inviterData[memberGuildID];\n                                var inviteArr = [];\n\n                                var objectKeys = Object.keys(guildData);\n\n                                sortedItems = \"\";\n                                for (i = 0; i < objectKeys.length; i++) {\n                                    var keyIndex = objectKeys[i];\n                                    guildData[keyIndex][\"id\"] = keyIndex;\n                                    inviteArr.push(guildData[keyIndex]);\n                                }\n\n                                var sortedArr = inviteArr.sort(function(a, b) {\n                                    return b[\"data\"][\"real\"] - a[\"data\"][\"real\"]\n                                });\n\n                                var leaderboardStanding = sortedArr.findIndex(userData => userData[\"id\"] == inviterID) + 1;\n\n                                var format = inviteSettings[memberGuildID][\"logging\"][\"format\"]\n                                fetchedChannel.send({\n                                    embed: {\n                                        title: `Witaj ${memberGuild.name}!`,\n                                        description: format.replace(/{user1}/g, `${member}`).replace(/{user2}/g, `${inviter}`).replace(/{code}/g, `${invited.code}`).replace(/{uses}/g, `${invited.uses}`),\n                                        thumbnail: {\n                                            url: member.user.avatarURL(),\n                                        },\n                                        fields: [{\n                                                name: '👤 Zapraszający',\n                                                value: inviter,\n                                                inline: true,\n                                            },\n                                            {\n                                                name: '✅ Prawdziwe Zapraszenia',\n                                                value: inviterDataFile[\"data\"][\"real\"],\n                                                inline: true,\n                                            },\n                                            {\n                                                name: '🏆 Rank',\n                                                value: `#${leaderboardStanding}`,\n                                                inline: true,\n                                            }\n                                        ],\n                                        \"color\": 0x00ff00,\n                                        timestamp: new Date()\n                                    }\n                                });\n                            } else {\n                                inviteSettings[memberGuildID][\"logging\"][\"enabled\"] = false;\n                                inviteSettings[memberGuildID][\"logging\"][\"channel\"] = \"0\";\n\n                                writeToData(\"inviteManagerSettings\", inviteSettings, \"inviteSettings\");\n                            }\n\n                        }\n\n                    }).catch(error => {\n                        //\n                    })\n                } else {\n                    if (checkProperty(inviteSettings, memberGuildID) && inviteSettings[memberGuildID][\"logging\"][\"enabled\"]) {\n                        var fetchedChannel = memberGuild.channels.cache.get(inviteSettings[memberGuildID][\"logging\"][\"channel\"]);\n                        if (fetchedChannel != null) {\n                            if (memberGuild.vanityURLCode != null) {\n                                msg.guild.fetchVanityData()\n                                    .then(res => {\n                                        fetchedChannel.send({\n                                            embed: {\n                                                title: `Welcome to ${memberGuild.name}!`,\n                                                description: `${member} has joined using the vanity url (https://discord.gg/${res.coode})\\n\\n(${res.uses} Uses)`,\n                                                thumbnail: {\n                                                    url: member.user.avatarURL(),\n                                                },\n                                                \"color\": 0x00ff00,\n                                                timestamp: new Date()\n                                            }\n                                        });\n                                        console.log(`Vanity URL: https://discord.gg/${res.code} with ${res.uses} uses`);\n                                    })\n                                    .catch(console.error);\n                            }\n                        }\n                    }\n                }\n            }).catch();\n        });\n\n        client.on('guildMemberRemove', async (member) => {\n            var memberGuild = member.guild;\n            var memberGuildID = memberGuild.id;\n\n            if (checkProperty(invitedData, memberGuildID) && checkProperty(invitedData[memberGuildID], member.id) && invitedData[memberGuildID][member.id].length != 0) {\n                var memberInviters = invitedData[memberGuildID][member.id];\n                var inviterDataFile = inviterData[memberGuildID][memberInviters[memberInviters.length - 1]];\n\n                var findInviteIndex = inviterDataFile[\"invites\"].findIndex(inviteMem => inviteMem.id == member.id);\n                if (inviterDataFile[\"invites\"][findInviteIndex][\"valid\"]) {\n                    inviterDataFile[\"invites\"][findInviteIndex][\"valid\"] = false;\n                    inviterDataFile[\"invites\"][findInviteIndex][\"invalidCause\"] = \"User had left the server\";\n\n                    inviterDataFile[\"data\"][\"invalid\"] += 1;\n                    inviterDataFile[\"data\"][\"real\"] -= 1;\n                }\n\n                writeToData(\"inviteManagerData\", invitePData, \"invitePData\");\n            }\n        });\n\n        client.on('guildCreate', (guild) => {\n            guild.fetchInvites(invites => {\n                inviteDatabase[guild.id] = invites;\n            }).catch(error => {\n                if (dmOwnerOnMissingPermission) {\n                    g.owner.send(\"Hello!\\n\\nThis bot requires the `MANAGE_GUILD` permission to allow for the invite manager section of the bot to work.\\n\\nIf you do not turn on the permission, the bot cannot track incoming invites!\");\n                }\n            })\n        });\n\n        client.on('inviteCreate', (invite) => {\n            if (inviteDatabase[invite.guild.id] == null) {\n                inviteDatabase[invite.guild.id] = new Map();\n            }\n            inviteDatabase[invite.guild.id].set(invite.code, invite);\n        })\n\n        function checkReadFile(name, format, dataname) {\n            return new Promise(function(resolve) {\n                if (fs.existsSync(`./data/inviteManager/${name}.json`)) {\n                    fs.readFile(`./data/inviteManager/${name}.json`, function read(err, data) {\n                        if (err) {\n                            throw err;\n                        }\n                        data = JSON.parse(data)\n\n                        Actions[dataname] = data;\n\n                        resolve(data);\n                    });\n                } else {\n                    Actions[dataname] = format;\n                    writeToData(name, format, dataname);\n                    resolve(format);\n                }\n            })\n        }\n\n        function writeToData(name, data, dataname) {\n            fs.writeFile(`./data/inviteManager/${name}.json`, JSON.stringify(data), function(err) {\n                if (err) {\n                    return console.log(err);\n                }\n                Actions[dataname] = data;\n            });\n        }\n\n        function checkProperty(item, check) {\n            try {\n                if (item[check] == null) {\n                    return false;\n                } else {\n                    return true;\n                }\n            } catch (error) {\n                return false;\n            }\n        }\n    }\n\n    // VersionCheck:11","storage":"0","varName":"","name":"Run Script"}]},{"name":"<div style=\"color:orange\"><center>Spersanolizowane Pod Serwer</div>","temp":"","event-type":"0","_id":"GAjXx","actions":[]},{"name":"<div style=\"color:orange\"><center>test</div>","temp":"","event-type":"0","_id":"PjRah","actions":[]},{"name":"<div style=\"color:Red\"><center>Legends Squad</div>","temp":"","event-type":"0","_id":"IMOcY","actions":[]}]